---
export const prerender = true;

import { getCollection } from 'astro:content';
import DefaultLayout from '../layouts/DefaultLayout.astro';
import Card from '../components/Card.astro';
import CountUp from '../components/CountUp.tsx';
import Masonry from '../components/Masonry.tsx';
import WeatherWidget from '../components/WeatherWidget.tsx';
import TextType from '../components/TextType.tsx';
import { SITE_CONFIG } from '../utils/config';
import { getUpcomingEvents } from '../utils/events';

// Recupera i contenuti per la homepage
const news = await getCollection('news', ({ data }) => data.published);

// Ordina per data e prendi solo i più recenti
// Carica tutte le notizie per il carosello invece di limitarle a 3
const allNews = news.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

// Usa la utility condivisa per caricare gli eventi futuri (stessa logica della pagina eventi)
// Mostra TUTTI gli eventi futuri disponibili, senza limiti artificiali
const allUpcomingEvents = await getUpcomingEvents();

// Immagini della galleria per gli eventi (stessa lista della pagina eventi)
const galleryImages = [
  "/images/1.jpg",
  "/images/2.jpg", 
  "/images/3.jpg",
  "/images/4.jpg",
  "/images/5.jpg",
  "/images/6.jpg",
  "/images/7.jpg",
  "/images/8.jpg",
  "/images/9.jpg",
  "/images/10.jpg",
  "/images/11.jpg",
  "/images/12.jpg",
  "/images/13.jpg",
  "/images/14.jpg",
  "/images/15.jpg",
  "/images/16.jpg",
  "/images/17.jpg",
  "/images/18.jpg",
  "/images/19.jpg",
  "/images/20.jpg"
];
const availablePhotos = [
  { name: "1.jpg", extension: "jpg" },
  { name: "2.jpg", extension: "jpg" },
  { name: "3.jpg", extension: "jpg" },
  { name: "4.jpg", extension: "jpg" },
  { name: "5.jpg", extension: "jpg" },
  { name: "6.jpg", extension: "jpg" },
  { name: "7.jpg", extension: "jpg" },
  { name: "8.jpg", extension: "jpg" },
  { name: "9.jpg", extension: "jpg" },
  { name: "10.jpg", extension: "jpg" },
  { name: "11.jpeg", extension: "jpeg" },
  { name: "12.jpg", extension: "jpg" },
];

// Funzione per rimescolare un array (Fisher-Yates shuffle)
function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

// Funzione per generare altezze casuali per il layout masonry
function getRandomHeight(): number {
  const heights = [260, 280, 290, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 520, 550];
  return heights[Math.floor(Math.random() * heights.length)];
}

// Seleziona casualmente 12 foto dalla cartella e le rimescola
const shuffledPhotos = shuffleArray(availablePhotos);
const selectedPhotos = shuffledPhotos.slice(0, 12);

// Dati per il componente Masonry - Foto locali di Piedelpoggio con effetto mosaico (selezione casuale)
const masonryItems = selectedPhotos.map((photo, index) => ({
  id: `${index + 1}`,
  img: `/images/${photo.name}`,
  url: "#",
  height: getRandomHeight(),
}));
---

<DefaultLayout title="Benvenuti a Piedelpoggio" description="Scopri il borgo medievale di Piedelpoggio, frazione di Leonessa nel cuore del Lazio. Storia, tradizioni e natura incontaminata.">
  <main class="min-h-screen bg-white">
    <!-- Hero Section -->
    <section class="relative min-h-screen flex items-center justify-center overflow-hidden">
      <!-- Background removed -->
      
      
      <!-- Decorative elements -->
    
    <!-- Content -->
    <div class="relative z-10 container mx-auto px-4 text-center">
      <div class="animate-fade-in-title">
        <h1 class="text-5xl md:text-7xl lg:text-8xl font-bold leading-tight min-h-[200px] md:min-h-[280px] lg:min-h-[320px] flex items-center justify-center">
          <TextType 
            text={["Benvenuti a", "Piedelpoggio"]}
            typingSpeed={150}
            pauseDuration={2000}
            loop={false}
            showCursor={true}
            cursorCharacter="|"
            className=""
            client:load
          />
        </h1>
        
        <p class="text-xl md:text-2xl lg:text-3xl text-gray-700 mb-10 max-w-4xl mx-auto leading-relaxed animate-slide-up font-light" style="animation-delay: 0.3s;">
          Un borgo medievale ai piedi del <span class="font-semibold text-primary-800">Monte di Cambio</span>, dove storia e tradizioni si fondono con la bellezza della natura laziale
        </p>
        
        <!-- Contenitore con dimensioni fisse per il widget meteo -->
        <div class="mb-12 animate-slide-up" style="animation-delay: 0.6s;">
          <!-- Placeholder che mantiene le dimensioni del widget -->
          <div class="bg-gradient-to-r from-blue-50/80 via-white/90 to-sky-50/80 backdrop-blur-sm rounded-2xl p-4 sm:p-6 shadow-soft border border-gray-200 min-h-[800px] sm:min-h-[900px] lg:min-h-[1000px]
">
            <div class="flex flex-col items-center justify-start min-h-full">
              <WeatherWidget client:load />
            </div>
          </div>
        </div>
        
        <!-- Citazione poetica di Angelo Felice Maccheroni -->
        <div class="mb-12 animate-slide-up" style="animation-delay: 0.7s;">
          <div class="relative max-w-2xl mx-auto">
            <!-- Decorative quote marks -->
            <div class="absolute -top-4 -left-4 text-6xl text-primary-300/40 font-serif leading-none">"</div>
            <div class="absolute -bottom-8 -right-4 text-6xl text-primary-300/40 font-serif leading-none rotate-180">"</div>
            
            <!-- Quote content -->
            <blockquote class="relative bg-gradient-to-br from-white/80 to-primary-50/60 backdrop-blur-sm border border-gray-200 rounded-3xl p-8 shadow-soft
">
              <div class="text-center">
                <p class="text-lg md:text-xl lg:text-2xl text-gray-800 leading-relaxed font-light italic mb-6">
                  …In questa villa deliziosa e amena<br>
                  che sembra in tutto l'isola cumana<br>
                  vidi del dì la luce alma e serena….
                </p>
                <footer class="flex items-center justify-center gap-2">
                  <div class="w-12 h-px bg-gradient-to-r from-transparent via-primary-400 to-transparent"></div>
                  <cite class="text-primary-700 font-medium text-sm md:text-base not-italic">
                    Angelo Felice Maccheroni
                  </cite>
                  <div class="w-12 h-px bg-gradient-to-r from-transparent via-primary-400 to-transparent"></div>
                </footer>
              </div>
            </blockquote>
          </div>
        </div>
        

      </div>
    </div>
  </section>

  <!-- Galleria Masonry -->
  <section class="pt-6 pb-0 relative overflow-hidden">
    <!-- Decorative background elements -->
    
    
    
    <div class="container mx-auto px-4 relative z-10">
      <div class="animate-slide-up">
        <Masonry 
          items={masonryItems}
          ease="ease-out"
          duration={0.6}
          stagger={0.05}
          animateFrom="bottom"
          scaleOnHover={true}
          hoverScale={0.95}
          blurToFocus={true}
          colorShiftOnHover={false}
          client:load
        />
      </div>
    </div>
  </section>

  <!-- Sezione Notizie con Carosello -->
  {allNews.length > 0 && (
    <section class="py-12 relative overflow-hidden">
      <!-- Background removed -->
      
      
      <div class="container mx-auto px-6 relative z-10">
        <div class="flex flex-col md:flex-row md:justify-between md:items-center mb-0 animate-fade-in gap-4 md:gap-0 mt-8">
          <div>
            <div class="flex items-center gap-4 mb-4">
              <div class="w-12 h-12 rounded-xl flex items-center justify-center" style="background: linear-gradient(135deg, #0ea5e9, #0284c7);">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"/>
                </svg>
              </div>
              <h2 class="text-4xl md:text-5xl font-bold bg-gradient-to-r from-primary-700 via-primary-600 to-primary-500 bg-clip-text text-transparent">
                ULTIME NOTIZIE
              </h2>
            </div>
            <div class="w-32 h-1.5 rounded-full" style="background: linear-gradient(to right, #0ea5e9, #0284c7, #0369a1);"></div>
          </div>
          <a href="/notizie" class="group inline-flex items-center gap-2 text-primary-600 hover:text-primary-700 font-semibold text-sm md:text-lg transition-all duration-300 hover:gap-3 self-start md:self-auto">
            <span class="whitespace-nowrap">Vedi tutte</span>
            <svg class="w-4 h-4 md:w-5 md:h-5 transform group-hover:translate-x-1 transition-transform duration-300 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
            </svg>
          </a>
        </div>

        <!-- Carosello delle Notizie -->
        <div class="relative flex items-center">
          <!-- Pulsante precedente - esterno a sinistra - nascosto su mobile -->
          {allNews.length > 3 && (
            <button 
              id="prev-btn" 
              class="hidden md:flex w-12 h-12 rounded-full items-center justify-center text-white shadow-lg transition-all duration-300 hover:scale-110 disabled:opacity-50 z-10 mr-6 focus:outline-none"
              style="background: linear-gradient(135deg, #0ea5e9, #0284c7); border-radius: 50% !important;"
              aria-label="Notizia precedente"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
              </svg>
            </button>
          )}
          
          <!-- Contenitore del carosello -->
          <div class="flex-1 overflow-x-hidden rounded-2xl px-2 md:px-4 pt-4">
            <div id="news-carousel" class="flex transition-transform duration-500 ease-in-out">
              {allNews.map((item, index) => (
                <div class="w-full md:w-1/2 lg:w-1/3 flex-shrink-0 px-1 md:px-2 news-card-container">
                  <div class="animate-slide-up h-full" style={`animation-delay: ${(index % 3) * 0.1}s;`}>
                    <Card
                      title={item.data.title}
                      description={item.data.summary}
                      href={`/notizie/${item.slug}`}
                      date={item.data.date}
                      category="Notizie"
                      image={item.data.cover || masonryItems[index % masonryItems.length].img}
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          <!-- Pulsante successivo - esterno a destra - nascosto su mobile -->
          {allNews.length > 3 && (
            <button 
              id="next-btn"
              class="hidden md:flex w-12 h-12 rounded-full items-center justify-center text-white shadow-lg transition-all duration-300 hover:scale-110 disabled:opacity-50 z-10 ml-6 focus:outline-none"
              style="background: linear-gradient(135deg, #0ea5e9, #0284c7); border-radius: 50% !important;"
              aria-label="Notizia successiva"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
              </svg>
            </button>
          )}
        </div>
        
        <!-- Indicatori di posizione -->
        {allNews.length > 3 && (
          <div class="flex justify-center mt-8 gap-2 flex-wrap">
            {allNews.map((_, index) => (
              <button 
                class="indicator w-3 h-3 rounded-full transition-all duration-300"
                data-index={index}
                style="background: linear-gradient(135deg, #0ea5e9, #0284c7);"
                aria-label={`Vai alla notizia ${index + 1}`}
              />
            ))}
          </div>
        )}
      </div>
    </section>
  )}

  <!-- Eventi in Programma -->
  {allUpcomingEvents.length > 0 && (
    <section class="pt-0 pb-12 relative overflow-hidden">
      <!-- Background removed -->
      
      
      <div class="container mx-auto px-6 relative z-10">
        <div class="flex flex-col md:flex-row md:justify-between md:items-center mb-0 animate-fade-in gap-4 md:gap-0 mt-8">
          <div>
            <div class="flex items-center gap-4 mb-4">
              <div class="w-12 h-12 rounded-xl flex items-center justify-center" style="background: linear-gradient(135deg, #0ea5e9, #0284c7);">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                </svg>
              </div>
              <h2 class="text-4xl md:text-5xl font-bold bg-gradient-to-r from-primary-700 via-primary-600 to-primary-500 bg-clip-text text-transparent">
                PROSSIMI EVENTI
              </h2>
            </div>
            <div class="w-32 h-1.5 rounded-full" style="background: linear-gradient(to right, #0ea5e9, #0284c7, #0369a1);"></div>
          </div>
          <a href="/eventi" class="group inline-flex items-center gap-2 text-primary-600 hover:text-primary-700 font-semibold text-sm md:text-lg transition-all duration-300 hover:gap-3 self-start md:self-auto">
            <span class="whitespace-nowrap">Vedi tutti</span>
            <svg class="w-4 h-4 md:w-5 md:h-5 transform group-hover:translate-x-1 transition-transform duration-300 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
            </svg>
          </a>
        </div>

        <!-- Carosello degli Eventi -->
        <div class="relative flex items-center">
          <!-- Pulsante precedente - esterno a sinistra - nascosto su mobile -->
          {allUpcomingEvents.length > 3 && (
            <button 
              id="events-prev-btn" 
              class="hidden md:flex w-12 h-12 rounded-full items-center justify-center text-white shadow-lg transition-all duration-300 hover:scale-110 disabled:opacity-50 z-10 mr-6 focus:outline-none"
              style="background: linear-gradient(135deg, #0ea5e9, #0284c7); border-radius: 50% !important;"
              aria-label="Evento precedente"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
              </svg>
            </button>
          )}
          
          <!-- Contenitore del carosello -->
          <div class="flex-1 overflow-x-hidden rounded-2xl px-2 md:px-4 pt-4">
            <div id="events-carousel" class="flex transition-transform duration-500 ease-in-out">
              {allUpcomingEvents.map((item, index) => (
                <div class="w-full md:w-1/2 lg:w-1/3 flex-shrink-0 px-1 md:px-2 events-card-container">
                  <div class="animate-slide-up h-full" style={`animation-delay: ${(index % 3) * 0.1}s;`}>
                    <Card
                      title={item.data.title}
                      description={item.body ? item.body.substring(0, 150) + '...' : 'Scopri tutti i dettagli di questo evento speciale.'}
                      href={`/eventi/${item.slug}`}
                      date={item.data.startsAt}
                      category="Eventi"
                      image={item.data.cover || galleryImages[index % galleryImages.length]}
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          <!-- Pulsante successivo - esterno a destra - nascosto su mobile -->
          {allUpcomingEvents.length > 3 && (
            <button 
              id="events-next-btn"
              class="hidden md:flex w-12 h-12 rounded-full items-center justify-center text-white shadow-lg transition-all duration-300 hover:scale-110 disabled:opacity-50 z-10 ml-6 focus:outline-none"
              style="background: linear-gradient(135deg, #0ea5e9, #0284c7); border-radius: 50% !important;"
              aria-label="Evento successivo"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
              </svg>
            </button>
          )}
        </div>
        
        <!-- Indicatori di posizione -->
        {allUpcomingEvents.length > 3 && (
          <div class="flex justify-center mt-8 gap-2 flex-wrap">
            {allUpcomingEvents.map((_, index) => (
              <button 
                class="events-indicator w-3 h-3 rounded-full transition-all duration-300"
                data-index={index}
                style="background: linear-gradient(135deg, #0ea5e9, #0284c7);"
                aria-label={`Vai all'evento ${index + 1}`}
              />
            ))}
          </div>
        )}
      </div>
    </section>
  )}
</DefaultLayout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const carousel = document.getElementById('news-carousel');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const dots = document.querySelectorAll('.indicator');
    
    // Verifica che tutti gli elementi esistano
    if (!carousel || !prevBtn || !nextBtn || dots.length === 0) {
      console.log('Elementi del carosello non trovati');
      return;
    }
    
    let currentIndex = 0;
    const totalNews = dots.length;
    const itemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
    const maxIndex = Math.max(0, totalNews - itemsVisible);
    
    // Funzione per calcolare la larghezza di una singola notizia
    function getItemWidth() {
      if (window.innerWidth >= 1024) return 100 / 3; // lg: 1/3
      if (window.innerWidth >= 768) return 50; // md: 1/2
      return 100; // sm: full width
    }
    
    // Funzione per aggiornare la posizione del carosello
    function updateCarousel() {
      const itemWidth = getItemWidth();
      const translateX = -currentIndex * itemWidth;
      carousel.style.transform = `translateX(${translateX}%)`;
      
      // Aggiorna i pulsanti
      const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      const currentMaxIndex = Math.max(0, totalNews - currentItemsVisible);
      
      prevBtn.disabled = currentIndex === 0;
      nextBtn.disabled = currentIndex >= currentMaxIndex;
      
      // Aggiorna gli indicatori - solo quelli visibili dovrebbero essere evidenziati
      dots.forEach((dot, index) => {
        if (index >= currentIndex && index < currentIndex + currentItemsVisible) {
          dot.style.background = 'linear-gradient(135deg, #0ea5e9, #0284c7)';
          dot.style.opacity = '1';
        } else {
          dot.style.background = '#cbd5e1';
          dot.style.opacity = '0.6';
        }
      });
      
      // Applica effetto hover automatico alla card centrale su mobile
      updateMobileHoverEffect();
    }
    
    // Funzione per gestire l'effetto hover automatico su mobile
    function updateMobileHoverEffect() {
      const isMobile = window.innerWidth < 768;
      const cards = document.querySelectorAll('.news-card-container article.group');
      
      if (isMobile && cards.length > 0) {
        // Rimuovi l'effetto hover da tutte le card
        cards.forEach(card => {
          card.classList.remove('mobile-hover-active');
        });
        
        // Applica l'effetto hover alla card centrale (quella attualmente visibile)
        const centralCardIndex = currentIndex;
        if (cards[centralCardIndex]) {
          cards[centralCardIndex].classList.add('mobile-hover-active');
          console.log(`Mobile hover applicato alla card news ${centralCardIndex}`);
        }
      } else {
        // Su desktop rimuovi tutte le classi mobile-hover-active
        cards.forEach(card => {
          card.classList.remove('mobile-hover-active');
        });
      }
    }
    
    // Event listeners per i pulsanti
    prevBtn.addEventListener('click', () => {
      const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      if (currentIndex > 0) {
        currentIndex--;
        updateCarousel();
      }
    });
    
    nextBtn.addEventListener('click', () => {
      const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      const currentMaxIndex = Math.max(0, totalNews - currentItemsVisible);
      if (currentIndex < currentMaxIndex) {
        currentIndex++;
        updateCarousel();
      }
    });
    
    // Event listeners per gli indicatori
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
        const currentMaxIndex = Math.max(0, totalNews - currentItemsVisible);
        const newIndex = Math.min(index, currentMaxIndex);
        currentIndex = newIndex;
        updateCarousel();
      });
    });
    
    // Supporto per navigazione da tastiera
    document.addEventListener('keydown', (e) => {
      const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      const currentMaxIndex = Math.max(0, totalNews - currentItemsVisible);
      
      if (e.key === 'ArrowLeft' && currentIndex > 0) {
        currentIndex--;
        updateCarousel();
      } else if (e.key === 'ArrowRight' && currentIndex < currentMaxIndex) {
        currentIndex++;
        updateCarousel();
      }
    });
    
    // Supporto per swipe su dispositivi touch
    let startX = 0;
    let endX = 0;
    let isDragging = false;
    let startTransform = 0;
    
    // Mouse events per desktop
    carousel.addEventListener('mousedown', (e) => {
      isDragging = true;
      startX = e.clientX;
      const transform = carousel.style.transform;
      startTransform = transform ? parseFloat(transform.match(/-?\d+\.?\d*/)) || 0 : 0;
      carousel.style.cursor = 'grabbing';
      e.preventDefault();
    });
    
    document.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      
      const diff = e.clientX - startX;
      const itemWidth = getItemWidth();
      const maxTranslate = -(totalNews - (window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1)) * itemWidth;
      
      let newTransform = startTransform + (diff / carousel.offsetWidth) * 100;
      newTransform = Math.max(maxTranslate, Math.min(0, newTransform));
      
      carousel.style.transform = `translateX(${newTransform}%)`;
    });
    
    document.addEventListener('mouseup', (e) => {
      if (!isDragging) return;
      isDragging = false;
      carousel.style.cursor = 'grab';
      
      const diff = e.clientX - startX;
      const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      const currentMaxIndex = Math.max(0, totalNews - currentItemsVisible);
      
      if (Math.abs(diff) > 50) {
        if (diff < 0 && currentIndex < currentMaxIndex) {
          currentIndex++;
        } else if (diff > 0 && currentIndex > 0) {
          currentIndex--;
        }
      }
      updateCarousel();
    });
    
    // Touch events migliorati
    carousel.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
      const transform = carousel.style.transform;
      startTransform = transform ? parseFloat(transform.match(/-?\d+\.?\d*/)) || 0 : 0;
    });
    
    carousel.addEventListener('touchmove', (e) => {
      const diff = e.touches[0].clientX - startX;
      const itemWidth = getItemWidth();
      const maxTranslate = -(totalNews - (window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1)) * itemWidth;
      
      let newTransform = startTransform + (diff / carousel.offsetWidth) * 100;
      newTransform = Math.max(maxTranslate, Math.min(0, newTransform));
      
      carousel.style.transform = `translateX(${newTransform}%)`;
      e.preventDefault();
    });
    
    carousel.addEventListener('touchend', (e) => {
      endX = e.changedTouches[0].clientX;
      const diff = startX - endX;
      const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      const currentMaxIndex = Math.max(0, totalNews - currentItemsVisible);
      
      if (Math.abs(diff) > 50) {
        if (diff > 0 && currentIndex < currentMaxIndex) {
          currentIndex++;
        } else if (diff < 0 && currentIndex > 0) {
          currentIndex--;
        }
      }
      updateCarousel();
    });
    
    // Funzione per equalizzare le altezze delle card
    function equalizeCardHeights() {
      const cardContainers = document.querySelectorAll('.news-card-container .animate-slide-up');
      
      // Reset delle altezze per calcolare quelle naturali
      cardContainers.forEach(container => {
        container.style.height = 'auto';
      });
      
      // Calcola l'altezza massima
      let maxHeight = 0;
      cardContainers.forEach(container => {
        const height = container.offsetHeight;
        if (height > maxHeight) {
          maxHeight = height;
        }
      });
      
      // Applica l'altezza massima a tutti i contenitori
      cardContainers.forEach(container => {
        container.style.height = maxHeight + 'px';
      });
    }

    // Gestione del resize della finestra
    window.addEventListener('resize', () => {
      const newItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      const newMaxIndex = Math.max(0, totalNews - newItemsVisible);
      
      // Aggiusta l'indice corrente se necessario
      if (currentIndex > newMaxIndex) {
        currentIndex = newMaxIndex;
      }
      
      updateCarousel();
      
      // Ricalcola le altezze dopo il resize
      setTimeout(equalizeCardHeights, 100);
      
      // Aggiorna l'effetto hover mobile quando si ridimensiona
      setTimeout(() => {
        updateMobileHoverEffect();
      }, 100);
    });
    
    // Inizializza il carosello
    updateCarousel();
    
    // Applica l'effetto hover iniziale su mobile dopo un breve delay
    setTimeout(() => {
      updateMobileHoverEffect();
    }, 100);
    
    // Equalizza le altezze dopo il caricamento
    setTimeout(equalizeCardHeights, 200);
  });

  // JavaScript per il carosello degli eventi
  document.addEventListener('DOMContentLoaded', function() {
    const eventsCarousel = document.getElementById('events-carousel');
    const eventsPrevBtn = document.getElementById('events-prev-btn');
    const eventsNextBtn = document.getElementById('events-next-btn');
    const eventsDots = document.querySelectorAll('.events-indicator');
    
    // Verifica che tutti gli elementi esistano
    if (!eventsCarousel || !eventsPrevBtn || !eventsNextBtn || eventsDots.length === 0) {
      console.log('Elementi del carosello eventi non trovati');
      return;
    }
    
    let eventsCurrentIndex = 0;
    const totalEvents = eventsDots.length;
    const eventsItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
    const eventsMaxIndex = Math.max(0, totalEvents - eventsItemsVisible);
    
    // Funzione per calcolare la larghezza di una singola card evento
    function getEventsItemWidth() {
      if (window.innerWidth >= 1024) return 100 / 3; // lg: 1/3
      if (window.innerWidth >= 768) return 50; // md: 1/2
      return 100; // sm: 1/1
    }
    
    // Funzione per aggiornare la posizione del carosello eventi
    function updateEventsCarousel() {
      const itemWidth = getEventsItemWidth();
      const translateX = -eventsCurrentIndex * itemWidth;
      eventsCarousel.style.transform = `translateX(${translateX}%)`;
      
      // Aggiorna i pulsanti
      const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      const currentMaxIndex = Math.max(0, totalEvents - currentItemsVisible);
      
      eventsPrevBtn.disabled = eventsCurrentIndex === 0;
      eventsNextBtn.disabled = eventsCurrentIndex >= currentMaxIndex;
      
      // Aggiorna gli indicatori - solo quelli visibili dovrebbero essere evidenziati
      eventsDots.forEach((dot, index) => {
        if (index >= eventsCurrentIndex && index < eventsCurrentIndex + currentItemsVisible) {
          dot.style.background = 'linear-gradient(135deg, #0ea5e9, #0284c7)';
          dot.style.opacity = '1';
        } else {
          dot.style.background = '#cbd5e1';
          dot.style.opacity = '0.6';
        }
      });
      
      // Applica effetto hover automatico alla card centrale su mobile per eventi
      updateEventsMobileHoverEffect();
    }
    
    // Funzione per gestire l'effetto hover automatico su mobile per eventi
    function updateEventsMobileHoverEffect() {
      const isMobile = window.innerWidth < 768;
      const cards = document.querySelectorAll('.events-card-container article.group');
      
      if (isMobile && cards.length > 0) {
        // Rimuovi l'effetto hover da tutte le card eventi
        cards.forEach(card => {
          card.classList.remove('mobile-hover-active');
        });
        
        // Applica l'effetto hover alla card centrale eventi (quella attualmente visibile)
        const centralCardIndex = eventsCurrentIndex;
        if (cards[centralCardIndex]) {
          cards[centralCardIndex].classList.add('mobile-hover-active');
          console.log(`Mobile hover applicato alla card eventi ${centralCardIndex}`);
        }
      } else {
        // Su desktop rimuovi tutte le classi mobile-hover-active
        cards.forEach(card => {
          card.classList.remove('mobile-hover-active');
        });
      }
    }
    
    // Event listeners per i pulsanti eventi
    eventsPrevBtn.addEventListener('click', () => {
      const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      if (eventsCurrentIndex > 0) {
        eventsCurrentIndex--;
        updateEventsCarousel();
      }
    });
    
    eventsNextBtn.addEventListener('click', () => {
      const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      const currentMaxIndex = Math.max(0, totalEvents - currentItemsVisible);
      if (eventsCurrentIndex < currentMaxIndex) {
        eventsCurrentIndex++;
        updateEventsCarousel();
      }
    });
    
    // Event listeners per gli indicatori eventi
    eventsDots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
        const currentMaxIndex = Math.max(0, totalEvents - currentItemsVisible);
        const newIndex = Math.min(index, currentMaxIndex);
        eventsCurrentIndex = newIndex;
        updateEventsCarousel();
      });
    });
    
    // Supporto per navigazione da tastiera eventi
    document.addEventListener('keydown', (e) => {
      const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      const currentMaxIndex = Math.max(0, totalEvents - currentItemsVisible);
      
      if (e.key === 'ArrowLeft' && eventsCurrentIndex > 0) {
        eventsCurrentIndex--;
        updateEventsCarousel();
      } else if (e.key === 'ArrowRight' && eventsCurrentIndex < currentMaxIndex) {
        eventsCurrentIndex++;
        updateEventsCarousel();
      }
    });
    
    // Supporto per swipe su dispositivi touch eventi
    let eventsStartX = 0;
    let eventsEndX = 0;
    let eventsIsDragging = false;
    let eventsStartTransform = 0;
    
    // Mouse events per desktop - eventi
    eventsCarousel.addEventListener('mousedown', (e) => {
      eventsIsDragging = true;
      eventsStartX = e.clientX;
      const transform = eventsCarousel.style.transform;
      eventsStartTransform = transform ? parseFloat(transform.match(/-?\d+\.?\d*/)) || 0 : 0;
      eventsCarousel.style.cursor = 'grabbing';
      e.preventDefault();
    });
    
    document.addEventListener('mousemove', (e) => {
      if (!eventsIsDragging) return;
      
      const diff = e.clientX - eventsStartX;
      const itemWidth = getEventsItemWidth();
      const maxTranslate = -(totalEvents - (window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1)) * itemWidth;
      
      let newTransform = eventsStartTransform + (diff / eventsCarousel.offsetWidth) * 100;
      newTransform = Math.max(maxTranslate, Math.min(0, newTransform));
      
      eventsCarousel.style.transform = `translateX(${newTransform}%)`;
    });
    
    document.addEventListener('mouseup', (e) => {
      if (!eventsIsDragging) return;
      eventsIsDragging = false;
      eventsCarousel.style.cursor = 'grab';
      
      const diff = e.clientX - eventsStartX;
      const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      const currentMaxIndex = Math.max(0, totalEvents - currentItemsVisible);
      
      if (Math.abs(diff) > 50) {
        if (diff < 0 && eventsCurrentIndex < currentMaxIndex) {
          eventsCurrentIndex++;
        } else if (diff > 0 && eventsCurrentIndex > 0) {
          eventsCurrentIndex--;
        }
      }
      updateEventsCarousel();
    });
    
    // Touch events migliorati - eventi
    eventsCarousel.addEventListener('touchstart', (e) => {
      eventsStartX = e.touches[0].clientX;
      const transform = eventsCarousel.style.transform;
      eventsStartTransform = transform ? parseFloat(transform.match(/-?\d+\.?\d*/)) || 0 : 0;
    });
    
    eventsCarousel.addEventListener('touchmove', (e) => {
      const diff = e.touches[0].clientX - eventsStartX;
      const itemWidth = getEventsItemWidth();
      const maxTranslate = -(totalEvents - (window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1)) * itemWidth;
      
      let newTransform = eventsStartTransform + (diff / eventsCarousel.offsetWidth) * 100;
      newTransform = Math.max(maxTranslate, Math.min(0, newTransform));
      
      eventsCarousel.style.transform = `translateX(${newTransform}%)`;
      e.preventDefault();
    });
    
    eventsCarousel.addEventListener('touchend', (e) => {
      eventsEndX = e.changedTouches[0].clientX;
      const diff = eventsStartX - eventsEndX;
      const currentItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      const currentMaxIndex = Math.max(0, totalEvents - currentItemsVisible);
      
      if (Math.abs(diff) > 50) {
        if (diff > 0 && eventsCurrentIndex < currentMaxIndex) {
          eventsCurrentIndex++;
        } else if (diff < 0 && eventsCurrentIndex > 0) {
          eventsCurrentIndex--;
        }
      }
      updateEventsCarousel();
    });
    
    // Funzione per equalizzare le altezze delle card eventi
    function equalizeEventsCardHeights() {
      const cardContainers = document.querySelectorAll('.events-card-container .animate-slide-up');
      
      // Reset delle altezze per calcolare quelle naturali
      cardContainers.forEach(container => {
        container.style.height = 'auto';
      });
      
      // Calcola l'altezza massima
      let maxHeight = 0;
      cardContainers.forEach(container => {
        const height = container.offsetHeight;
        if (height > maxHeight) {
          maxHeight = height;
        }
      });
      
      // Applica l'altezza massima a tutti i contenitori
      cardContainers.forEach(container => {
        container.style.height = maxHeight + 'px';
      });
    }

    // Gestione del resize della finestra per eventi
    window.addEventListener('resize', () => {
      const newItemsVisible = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
      const newMaxIndex = Math.max(0, totalEvents - newItemsVisible);
      
      // Aggiusta l'indice corrente se necessario
      if (eventsCurrentIndex > newMaxIndex) {
        eventsCurrentIndex = newMaxIndex;
      }
      
      updateEventsCarousel();
      
      // Ricalcola le altezze dopo il resize
      setTimeout(equalizeEventsCardHeights, 100);
      
      // Aggiorna l'effetto hover mobile quando si ridimensiona
      setTimeout(() => {
        updateEventsMobileHoverEffect();
      }, 100);
    });
    
    // Inizializza il carosello eventi
    updateEventsCarousel();
    
    // Applica l'effetto hover iniziale su mobile per eventi dopo un breve delay
    setTimeout(() => {
      updateEventsMobileHoverEffect();
    }, 100);
    
    // Equalizza le altezze dopo il caricamento
    setTimeout(equalizeEventsCardHeights, 200);
  });
</script>

<style>
  /* Mobile hover effect - automatically applied to central card */
  @media (max-width: 767px) {
    .mobile-hover-active {
      transform: translateY(-8px) !important;
      border-color: rgb(147 197 253 / 0.5) !important;
      box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1) !important;
      transition: all 0.3s ease !important;
    }
    
    .mobile-hover-active img {
      transform: scale(1.05) !important;
      transition: transform 0.3s ease !important;
    }
    
    .mobile-hover-active .text-gray-600 {
      color: rgb(55 65 81) !important;
      transition: color 0.3s ease !important;
    }
    
    .mobile-hover-active time {
      color: rgb(14 165 233) !important;
      transition: color 0.3s ease !important;
    }
    
    .mobile-hover-active .border-gray-100\/50 {
      border-color: rgb(147 197 253 / 0.5) !important;
      transition: border-color 0.3s ease !important;
    }
    
    /* Ensure the effect is always visible, not just on hover */
    .mobile-hover-active h3 {
      color: rgb(17 24 39) !important;
      transition: color 0.3s ease !important;
    }
    
    .mobile-hover-active .bg-blue-50 {
      background-color: rgb(239 246 255) !important;
      color: rgb(29 78 216) !important;
      transition: all 0.3s ease !important;
    }
  }
</style>
